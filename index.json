{
  "api/DSB.GC.GCControllerInputs.html": {
    "href": "api/DSB.GC.GCControllerInputs.html",
    "title": "Class GCControllerInputs | Gaming Couch | 0.0.1",
    "keywords": "Class GCControllerInputs Namespace DSB.GC [Serializable] public class GCControllerInputs Inheritance object GCControllerInputs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields b1 Button 1, Would match A on Xbox controller public int b1 Field Value int b2 Button 2, Would match B on Xbox controller public int b2 Field Value int b3 Button 3, Would match X on Xbox controller public int b3 Field Value int b4 Button 4, Would match Y on Xbox controller public int b4 Field Value int lx Left stick X-axis public float lx Field Value float ly Left stick Y-axis public float ly Field Value float rx Right stick X-axis public float rx Field Value float ry Right stick Y-axis public float ry Field Value float Methods CreateFromJSON(string) public static GCControllerInputs CreateFromJSON(string inputsJson) Parameters inputsJson string Returns GCControllerInputs"
  },
  "api/DSB.GC.GCPlayOptions.html": {
    "href": "api/DSB.GC.GCPlayOptions.html",
    "title": "Class GCPlayOptions | Gaming Couch | 0.0.1",
    "keywords": "Class GCPlayOptions Namespace DSB.GC [Serializable] public class GCPlayOptions Inheritance object GCPlayOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields players public GCPlayerOptions[] players Field Value GCPlayerOptions[] Methods CreateFromJSON(string) public static GCPlayOptions CreateFromJSON(string optionsJson) Parameters optionsJson string Returns GCPlayOptions"
  },
  "api/DSB.GC.GCPlayer.html": {
    "href": "api/DSB.GC.GCPlayer.html",
    "title": "Class GCPlayer | Gaming Couch | 0.0.1",
    "keywords": "Class GCPlayer Namespace DSB.GC public class GCPlayer : MonoBehaviour, IGCPlayer Inheritance object GCPlayer Implements IGCPlayer Methods GamingCouchSetup(GCPlayerSetupOptions) Do not call this in your game script. This is called by the GamingCouch script. If you want to do something custom with the options on player setup, override this method. NOTE: Don't forget to call base.GamingCouchSetup(options) when overriding. public virtual void GamingCouchSetup(GCPlayerSetupOptions options) Parameters options GCPlayerSetupOptions Options provided by the platform GetColor() Get the player color provided by GamingCouch in GCPlayer.GamingCouchSetup. public virtual Color GetColor() Returns Color GetId() Get the player id provided by GamingCouch in GCPlayer.GamingCouchSetup. public virtual int GetId() Returns int GetName() Get the player name provided by GamingCouch in GCPlayer.GamingCouchSetup. public virtual string GetName() Returns string"
  },
  "api/DSB.GC.GCPlayerColor.html": {
    "href": "api/DSB.GC.GCPlayerColor.html",
    "title": "Enum GCPlayerColor | Gaming Couch | 0.0.1",
    "keywords": "Enum GCPlayerColor Namespace DSB.GC public enum GCPlayerColor Fields blue = 0 brown = 7 cyan = 6 green = 2 pink = 5 purple = 4 red = 1 yellow = 3"
  },
  "api/DSB.GC.GCPlayerOptions.html": {
    "href": "api/DSB.GC.GCPlayerOptions.html",
    "title": "Struct GCPlayerOptions | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayerOptions Namespace DSB.GC [Serializable] public struct GCPlayerOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields color public string color Field Value string name public string name Field Value string playerId public int playerId Field Value int"
  },
  "api/DSB.GC.GCPlayerSetupOptions.html": {
    "href": "api/DSB.GC.GCPlayerSetupOptions.html",
    "title": "Struct GCPlayerSetupOptions | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayerSetupOptions Namespace DSB.GC public struct GCPlayerSetupOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields color public Color color Field Value Color name public string name Field Value string playerId public int playerId Field Value int"
  },
  "api/DSB.GC.GCPlayerStore-1.html": {
    "href": "api/DSB.GC.GCPlayerStore-1.html",
    "title": "Class GCPlayerStore<T> | Gaming Couch | 0.0.1",
    "keywords": "Class GCPlayerStore<T> Namespace DSB.GC public class GCPlayerStore<T> : IGCPlayerStoreOutput<T>, IGCPlayerStoreInput<T> where T : IGCPlayer Type Parameters T Inheritance object GCPlayerStore<T> Implements IGCPlayerStoreOutput<T> IGCPlayerStoreInput<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GCPlayerStore() public GCPlayerStore() Methods AddPlayer(T) public void AddPlayer(T player) Parameters player T Clear() public void Clear() GetPlayerById(int) public T GetPlayerById(int playerId) Parameters playerId int Returns T GetPlayerByIndex(int) public T GetPlayerByIndex(int index) Parameters index int Returns T GetPlayerCount() public int GetPlayerCount() Returns int GetPlayers() public List<T> GetPlayers() Returns List<T> GetPlayersEnumerable() public IEnumerable<T> GetPlayersEnumerable() Returns IEnumerable<T>"
  },
  "api/DSB.GC.GCSetupOptions.html": {
    "href": "api/DSB.GC.GCSetupOptions.html",
    "title": "Class GCSetupOptions | Gaming Couch | 0.0.1",
    "keywords": "Class GCSetupOptions Namespace DSB.GC [Serializable] public class GCSetupOptions Inheritance object GCSetupOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields gameModeId public string gameModeId Field Value string Methods CreateFromJSON(string) public static GCSetupOptions CreateFromJSON(string optionsJson) Parameters optionsJson string Returns GCSetupOptions"
  },
  "api/DSB.GC.GCStatus.html": {
    "href": "api/DSB.GC.GCStatus.html",
    "title": "Enum GCStatus | Gaming Couch | 0.0.1",
    "keywords": "Enum GCStatus Namespace DSB.GC public enum GCStatus Fields GameOver = 3 PendingSetup = 0 Playing = 2 SetupDone = 1"
  },
  "api/DSB.GC.GamingCouch.html": {
    "href": "api/DSB.GC.GamingCouch.html",
    "title": "Class GamingCouch | Gaming Couch | 0.0.1",
    "keywords": "Class GamingCouch Namespace DSB.GC public class GamingCouch : MonoBehaviour Inheritance object GamingCouch Fields LogLevel public LogLevel LogLevel Field Value LogLevel Properties Hud public GCHud Hud { get; } Property Value GCHud Instance public static GamingCouch Instance { get; } Property Value GamingCouch Status public GCStatus Status { get; } Property Value GCStatus Methods Clear() Clears players from the player store and destroys the game objects. Clears player inputs. public void Clear() ClearInputs() Clear all player inputs. public void ClearInputs() GameEnd(int[]) Inform the platform that the game has ended. public void GameEnd(int[] placementsByPlayerId) Parameters placementsByPlayerId int[] Player ID's in placement order. GetInputsByPlayerId(int) Get player inputs by player ID. public GCControllerInputs GetInputsByPlayerId(int playerId) Parameters playerId int Player ID Returns GCControllerInputs null if not available InstantiatePlayers<T>(GCPlayerStore<T>, GCPlayerOptions[]) Instantiate players by using the prefab defined in GamingCouch game object's inspector. public void InstantiatePlayers<T>(GCPlayerStore<T> playerStore, GCPlayerOptions[] playerOptions) where T : class, IGCPlayer Parameters playerStore GCPlayerStore<T> Player store to add the players to. Note: You should instantiate this store in your main Game script to be able to provide it here. Refer the integration manual. playerOptions GCPlayerOptions[] Player options to instantiate the players with. These options are available via GamingCouchPlay Type Parameters T Your game specific player class that inherits IGCPlayer or extends GCPlayer. Restart() Can be called for dev purposes to quickly restart the game in editor play mode. public void Restart() SetupDone() Call after game setup is done eg. level and other assets are loaded and the game is ready to play intro and spawn players. GamingCouchPlay will be called next by the platform. You should not start the game before GamingCouchPlay is called. public void SetupDone()"
  },
  "api/DSB.GC.Hud.GCHud.html": {
    "href": "api/DSB.GC.Hud.GCHud.html",
    "title": "Class GCHud | Gaming Couch | 0.0.1",
    "keywords": "Class GCHud Namespace DSB.GC.Hud public class GCHud Inheritance object GCHud Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Camera public Camera Camera { get; } Property Value Camera Methods HandleQueue() public void HandleQueue() QueuePointData(GCScreenPointDataPoint) public void QueuePointData(GCScreenPointDataPoint pointData) Parameters pointData GCScreenPointDataPoint SetCamera(Camera) public void SetCamera(Camera camera) Parameters camera Camera Setup(GCHudConfig) Setup the HUD. Should be called once at the start of the game and before UpdatePlayers. public void Setup(GCHudConfig playersHudData) Parameters playersHudData GCHudConfig UpdatePlayers(GCPlayersHudData) Update the players in the HUD. Call Setup first. public void UpdatePlayers(GCPlayersHudData playersHudData) Parameters playersHudData GCPlayersHudData UpdateScreenPointHud(GCScreenPointData) public void UpdateScreenPointHud(GCScreenPointData testPointData) Parameters testPointData GCScreenPointData"
  },
  "api/DSB.GC.Hud.GCHudConfig.html": {
    "href": "api/DSB.GC.Hud.GCHudConfig.html",
    "title": "Struct GCHudConfig | Gaming Couch | 0.0.1",
    "keywords": "Struct GCHudConfig Namespace DSB.GC.Hud [Serializable] public struct GCHudConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields players public GCHudPlayersConfig players Field Value GCHudPlayersConfig"
  },
  "api/DSB.GC.Hud.GCHudPlayersConfig.html": {
    "href": "api/DSB.GC.Hud.GCHudPlayersConfig.html",
    "title": "Struct GCHudPlayersConfig | Gaming Couch | 0.0.1",
    "keywords": "Struct GCHudPlayersConfig Namespace DSB.GC.Hud Configuration for the players hud. [Serializable] public struct GCHudPlayersConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields valueType pointsSmall, text, lives public string valueType Field Value string"
  },
  "api/DSB.GC.Hud.GCNameTag.html": {
    "href": "api/DSB.GC.Hud.GCNameTag.html",
    "title": "Class GCNameTag | Gaming Couch | 0.0.1",
    "keywords": "Class GCNameTag Namespace DSB.GC.Hud public class GCNameTag : MonoBehaviour Inheritance object GCNameTag Methods SetPlayerId(int) public void SetPlayerId(int playerId) Parameters playerId int"
  },
  "api/DSB.GC.Hud.GCPlayersHudData.html": {
    "href": "api/DSB.GC.Hud.GCPlayersHudData.html",
    "title": "Struct GCPlayersHudData | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayersHudData Namespace DSB.GC.Hud [Serializable] public struct GCPlayersHudData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields players The players to display in the HUD. public GCPlayersHudDataPlayer[] players Field Value GCPlayersHudDataPlayer[]"
  },
  "api/DSB.GC.Hud.GCPlayersHudDataPlayer.html": {
    "href": "api/DSB.GC.Hud.GCPlayersHudDataPlayer.html",
    "title": "Struct GCPlayersHudDataPlayer | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayersHudDataPlayer Namespace DSB.GC.Hud [Serializable] public struct GCPlayersHudDataPlayer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields eliminated If the player is out of the game, the HUD can be set to display this player as eliminated. public bool eliminated Field Value bool placement The placement of the player. 0 is first place, 1 is second place, etc. Players in the HUD will be sorted based on this value to indicate placements at given time. (HUD sorting not yet implemented) public int placement Field Value int playerId Gaming Couch player ID. public int playerId Field Value int value The value to display for the player. This can be points, lives, etc. based on the valueType in the GCHudPlayersConfig. public string value Field Value string"
  },
  "api/DSB.GC.Hud.GCScreenPointData.html": {
    "href": "api/DSB.GC.Hud.GCScreenPointData.html",
    "title": "Struct GCScreenPointData | Gaming Couch | 0.0.1",
    "keywords": "Struct GCScreenPointData Namespace DSB.GC.Hud [Serializable] public struct GCScreenPointData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields points List of points to display in the HUD. public GCScreenPointDataPoint[] points Field Value GCScreenPointDataPoint[]"
  },
  "api/DSB.GC.Hud.GCScreenPointDataPoint.html": {
    "href": "api/DSB.GC.Hud.GCScreenPointDataPoint.html",
    "title": "Struct GCScreenPointDataPoint | Gaming Couch | 0.0.1",
    "keywords": "Struct GCScreenPointDataPoint Namespace DSB.GC.Hud [Serializable] public struct GCScreenPointDataPoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields playerId The player ID. public int playerId Field Value int type public string type Field Value string x The x position of the point in percentages 0-1. public float x Field Value float y The y position of the point in percentages 0-1. public float y Field Value float"
  },
  "api/DSB.GC.Hud.html": {
    "href": "api/DSB.GC.Hud.html",
    "title": "Namespace DSB.GC.Hud | Gaming Couch | 0.0.1",
    "keywords": "Namespace DSB.GC.Hud Classes GCHud GCNameTag Structs GCHudConfig GCHudPlayersConfig Configuration for the players hud. GCPlayersHudData GCPlayersHudDataPlayer GCScreenPointData GCScreenPointDataPoint"
  },
  "api/DSB.GC.LogLevel.html": {
    "href": "api/DSB.GC.LogLevel.html",
    "title": "Enum LogLevel | Gaming Couch | 0.0.1",
    "keywords": "Enum LogLevel Namespace DSB.GC public enum LogLevel Fields Debug = 3 Info = 2 None = 0 Warning = 1"
  },
  "api/DSB.GC.html": {
    "href": "api/DSB.GC.html",
    "title": "Namespace DSB.GC | Gaming Couch | 0.0.1",
    "keywords": "Namespace DSB.GC Classes GCControllerInputs GCPlayOptions GCPlayer GCPlayerStore<T> GCSetupOptions GamingCouch Structs GCPlayerOptions GCPlayerSetupOptions Enums GCPlayerColor GCStatus LogLevel"
  },
  "api/Global.GamingCouchEditor.html": {
    "href": "api/Global.GamingCouchEditor.html",
    "title": "Class GamingCouchEditor | Gaming Couch | 0.0.1",
    "keywords": "Class GamingCouchEditor Namespace Global public class GamingCouchEditor Inheritance object GamingCouchEditor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Global.IGCPlayer.html": {
    "href": "api/Global.IGCPlayer.html",
    "title": "Interface IGCPlayer | Gaming Couch | 0.0.1",
    "keywords": "Interface IGCPlayer Namespace Global public interface IGCPlayer Properties gameObject GameObject gameObject { get; } Property Value GameObject transform Transform transform { get; } Property Value Transform Methods GamingCouchSetup(GCPlayerSetupOptions) void GamingCouchSetup(GCPlayerSetupOptions options) Parameters options GCPlayerSetupOptions GetColor() Color GetColor() Returns Color GetId() int GetId() Returns int GetName() string GetName() Returns string"
  },
  "api/Global.IGCPlayerStoreInput-1.html": {
    "href": "api/Global.IGCPlayerStoreInput-1.html",
    "title": "Interface IGCPlayerStoreInput<T> | Gaming Couch | 0.0.1",
    "keywords": "Interface IGCPlayerStoreInput<T> Namespace Global public interface IGCPlayerStoreInput<in T> where T : IGCPlayer Type Parameters T Methods AddPlayer(T) void AddPlayer(T player) Parameters player T"
  },
  "api/Global.IGCPlayerStoreOutput-1.html": {
    "href": "api/Global.IGCPlayerStoreOutput-1.html",
    "title": "Interface IGCPlayerStoreOutput<T> | Gaming Couch | 0.0.1",
    "keywords": "Interface IGCPlayerStoreOutput<T> Namespace Global public interface IGCPlayerStoreOutput<out T> where T : IGCPlayer Type Parameters T Methods Clear() void Clear() GetPlayerById(int) T GetPlayerById(int playerId) Parameters playerId int Returns T GetPlayerByIndex(int) T GetPlayerByIndex(int index) Parameters index int Returns T GetPlayerCount() int GetPlayerCount() Returns int GetPlayersEnumerable() IEnumerable<out T> GetPlayersEnumerable() Returns IEnumerable<T>"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | Gaming Couch | 0.0.1",
    "keywords": "Namespace Classes GamingCouchEditor Interfaces IGCPlayer IGCPlayerStoreInput<T> IGCPlayerStoreOutput<T>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": ""
  },
  "manual/README.html": {
    "href": "manual/README.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": "https://github.com/deadsetbit/docfx-unitypackage?tab=readme-ov-file#usage"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Installation | Gaming Couch | 0.0.1",
    "keywords": "Unity integration for Gaming Couch platform. Installation You can import this package by using Unity's Package manager's import from git URL. Follow the integration steps below to get started. Configure the Editor fix the game window to 16:9 (from top of the Game window), as the platform is fixed to 16:9 aspect ratio Basic integration 1) Add GamingCouch game object Add GamingCouch game object to your main scene by right clicking the scene hierarchy and selecting \"GamingCouch\" from the menu. 2) Create and link game script (for new game project) create \"Game\" game object to the main scene and create and add \"Game.cs\" main game script to it link your main game script to the \"Listener\" field in GamingCouch game object (via inspector) now the game script will be able hook up to GamingCouch specific messages (we will get back to this) 2) Create and link player prefab (for new game project) create \"Player\" prefab and create and add \"Player.cs\" script to it make your player script extend DSB.GC.GCPlayer (instead of MonoBehaviour) link the player prefab to the \"Player Prefab\" field in GamingCouch game object (via inspector) 3) Hook up your main game script Define player store in your main game script // Use GamingCouch: using DSB.GC; // Add new field for playerStore. Replace the \"Player\" with your player script name, if it differs: private GCPlayerStore<Player> playerStore = new GCPlayerStore<Player>(); Listen for GamingCouchSetup message This is the place where you can start to load levels and what not based on the GCSetupOptions: private void GamingCouchSetup(GCSetupOptions options) { // do stuff based on the options. Eg. load level based on game mode etc. // after setup is done call: GamingCouch.Instance.SetupDone(); } Next we need to listen when GC and all the players are ready to play: private void GamingCouchPlay(GCPlayOptions options) { // we now have all the successfully loaded players so we can instantiate them. // This will instantiate and config the players by using the player prefab linked to GamingCouch game object GamingCouch.Instance.InstantiatePlayers(playerStore, options.players); // next we can set the game to play mode and or play intro StartMyGameNow(); } When the game ends, simply call: // you need to pass the player id's in placement order: GamingCouch.Instance.GameEnd(placementsByPlayerId); Next you should integrate the HUD, see the next section. HUD integration Setup the HUD The most basic setup that will just display the avatars and names of the players: using DSB.GC.Hud; GamingCouch.Instance.Hud.Setup(new GCHudConfig { players = new GCHudPlayersConfig() }); To display score or status text, see the API documentation for GCHudPlayersConfig. If the game has multiple game modes you can setup the HUD differently for each game mode. Update the players HUD using System.Linq; using DSB.GC.Hud; GamingCouch.Instance.Hud.UpdatePlayers(new GCPlayersHudData { players = playerStore.GetPlayers().Select(player => new GCPlayersHudDataPlayer { playerId = player.GetId(), // The GamingCouch player id eliminated = !player.IsAlive, // IsAlive is not provided by GCPlayer placement = 0, // The placement of the player to sort the players HUD by }).ToArray() }); If your HUD is setup to display score or status text, you can pass value for it, see the API documentation for GCPlayersHudDataPlayer. Player integration Configure player When the player is instantiated by GamingCouch some properties are available, such as Gaming Couch player id, color and name. For all available properties, see the API documentation for GCPlayer. The values are available on your player script instance on Start (note that they are not yet available on Awake!): public class Player : GCPlayer { ... private void Start() { GetComponent<SpriteRenderer>().color = GetColor(); } ... } Player inputs Read and apply the player inputs in your main game script Update method: private void Update() { foreach (var player in playerStore.GetPlayers()) { var inputs = GamingCouch.Instance.GetInputsByPlayerId(player.GetId()); if (inputs == null) continue; player.PlayerController.Move(inputs.lx); player.PlayerController.Jump(inputs.b1 == 1); } } Build your project for Gaming Couch When you are ready to build your project for Gaming Couch, you need to build it as WebGL. You can change this by selecting the WebGL tab from \"Project Settings > Player\". Under \"Project Settings > Player > WebGL\" tab's \"Publish settings\", set the compression format to \"Disabled\". // TODO: Further instructions on how to build the project for Gaming Couch and integrate it to the platform. What next? Explore our example template game project: Gaming Couch Unity Template Dive into the API documentation Creating Unity project from scratch If you do not want to use our Gaming Couch Unity Template, you can create project from scratch by following these steps: create new unity project with the \"Universal 3D\" template (URP) or optionally \"Universal 2D\" (URP) follow the installation and integration steps"
  }
}