{
  "api/DSB.GC.GamingCouch.html": {
    "href": "api/DSB.GC.GamingCouch.html",
    "title": "Class GamingCouch | Gaming Couch Title",
    "keywords": "Class GamingCouch Inheritance Object GamingCouch Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax public class GamingCouch : MonoBehaviour Properties Hud Declaration public GCHud Hud { get; } Property Value Type Description GCHud Instance Declaration public static GamingCouch Instance { get; } Property Value Type Description GamingCouch Status Declaration public GCStatus Status { get; } Property Value Type Description GCStatus Methods Clear() Declaration public void Clear() ClearInputs() Declaration public void ClearInputs() GameEnd(Int32[]) Declaration public void GameEnd(int[] placementsByPlayerId) Parameters Type Name Description Int32 [] placementsByPlayerId GetEditorPlayOptions() Declaration public GCPlayOptions GetEditorPlayOptions() Returns Type Description GCPlayOptions GetEditorSetupOptions() Declaration public GCSetupOptions GetEditorSetupOptions() Returns Type Description GCSetupOptions GetInputsByPlayerId(Int32) Declaration public GCControllerInputs GetInputsByPlayerId(int playerId) Parameters Type Name Description Int32 playerId Returns Type Description GCControllerInputs InstantiatePlayers<T>(GCPlayerStore<T>, PlayerOptions[]) Declaration public void InstantiatePlayers<T>(GCPlayerStore<T> playerStore, PlayerOptions[] playerOptions) where T : class, IGCPlayer Parameters Type Name Description GCPlayerStore <T> playerStore PlayerOptions [] playerOptions Type Parameters Name Description T Restart() Declaration public void Restart() SetupDone() Declaration public void SetupDone()"
  },
  "api/DSB.GC.GamingCouch.PlayerEditorData.html": {
    "href": "api/DSB.GC.GamingCouch.PlayerEditorData.html",
    "title": "Struct GamingCouch.PlayerEditorData | Gaming Couch Title",
    "keywords": "Struct GamingCouch.PlayerEditorData Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public struct PlayerEditorData Fields color Declaration public GCPlayerColor color Field Value Type Description GCPlayerColor name Declaration public string name Field Value Type Description String"
  },
  "api/DSB.GC.GCControllerInputs.html": {
    "href": "api/DSB.GC.GCControllerInputs.html",
    "title": "Class GCControllerInputs | Gaming Couch Title",
    "keywords": "Class GCControllerInputs Inheritance Object GCControllerInputs Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public class GCControllerInputs Fields b1 Declaration public int b1 Field Value Type Description Int32 b2 Declaration public int b2 Field Value Type Description Int32 b3 Declaration public int b3 Field Value Type Description Int32 b4 Declaration public int b4 Field Value Type Description Int32 lx Declaration public float lx Field Value Type Description Single ly Declaration public float ly Field Value Type Description Single rx Declaration public float rx Field Value Type Description Single ry Declaration public float ry Field Value Type Description Single Methods CreateFromJSON(String) Declaration public static GCControllerInputs CreateFromJSON(string inputsJson) Parameters Type Name Description String inputsJson Returns Type Description GCControllerInputs"
  },
  "api/DSB.GC.GCHud.html": {
    "href": "api/DSB.GC.GCHud.html",
    "title": "Class GCHud | Gaming Couch Title",
    "keywords": "Class GCHud Inheritance Object GCHud Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax public class GCHud Methods Setup(GCHudConfig) Declaration public void Setup(GCHudConfig playersHudData) Parameters Type Name Description GCHudConfig playersHudData UpdatePlayers(GCPlayersHudData) Declaration public void UpdatePlayers(GCPlayersHudData playersHudData) Parameters Type Name Description GCPlayersHudData playersHudData"
  },
  "api/DSB.GC.GCHudConfig.html": {
    "href": "api/DSB.GC.GCHudConfig.html",
    "title": "Struct GCHudConfig | Gaming Couch Title",
    "keywords": "Struct GCHudConfig Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public struct GCHudConfig Fields players Declaration public GCHudPlayersConfig players Field Value Type Description GCHudPlayersConfig"
  },
  "api/DSB.GC.GCHudPlayersConfig.html": {
    "href": "api/DSB.GC.GCHudPlayersConfig.html",
    "title": "Struct GCHudPlayersConfig | Gaming Couch Title",
    "keywords": "Struct GCHudPlayersConfig Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public struct GCHudPlayersConfig Fields valueType Declaration public string valueType Field Value Type Description String"
  },
  "api/DSB.GC.GCPlayer.html": {
    "href": "api/DSB.GC.GCPlayer.html",
    "title": "Class GCPlayer | Gaming Couch Title",
    "keywords": "Class GCPlayer Inheritance Object GCPlayer Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax public class GCPlayer : MonoBehaviour, IGCPlayer Methods GamingCouchSetup(GCPlayerSetupOptions) Declaration public virtual void GamingCouchSetup(GCPlayerSetupOptions options) Parameters Type Name Description GCPlayerSetupOptions options GetColor() Declaration public virtual Color GetColor() Returns Type Description Color GetId() Declaration public virtual int GetId() Returns Type Description Int32 GetName() Declaration public virtual string GetName() Returns Type Description String"
  },
  "api/DSB.GC.GCPlayerColor.html": {
    "href": "api/DSB.GC.GCPlayerColor.html",
    "title": "Enum GCPlayerColor | Gaming Couch Title",
    "keywords": "Enum GCPlayerColor Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax public enum GCPlayerColor Fields Name Description blue brown cyan green pink purple red yellow"
  },
  "api/DSB.GC.GCPlayerSetupOptions.html": {
    "href": "api/DSB.GC.GCPlayerSetupOptions.html",
    "title": "Struct GCPlayerSetupOptions | Gaming Couch Title",
    "keywords": "Struct GCPlayerSetupOptions Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax public struct GCPlayerSetupOptions Fields color Declaration public Color color Field Value Type Description Color name Declaration public string name Field Value Type Description String playerId Declaration public int playerId Field Value Type Description Int32"
  },
  "api/DSB.GC.GCPlayersHudData.html": {
    "href": "api/DSB.GC.GCPlayersHudData.html",
    "title": "Struct GCPlayersHudData | Gaming Couch Title",
    "keywords": "Struct GCPlayersHudData Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public struct GCPlayersHudData Fields players Declaration public GCPlayersHudDataPlayer[] players Field Value Type Description GCPlayersHudDataPlayer []"
  },
  "api/DSB.GC.GCPlayersHudDataPlayer.html": {
    "href": "api/DSB.GC.GCPlayersHudDataPlayer.html",
    "title": "Struct GCPlayersHudDataPlayer | Gaming Couch Title",
    "keywords": "Struct GCPlayersHudDataPlayer Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public struct GCPlayersHudDataPlayer Fields eliminated Declaration public bool eliminated Field Value Type Description Boolean placement Declaration public int placement Field Value Type Description Int32 playerId Declaration public int playerId Field Value Type Description Int32 value Declaration public string value Field Value Type Description String"
  },
  "api/DSB.GC.GCPlayerStore-1.html": {
    "href": "api/DSB.GC.GCPlayerStore-1.html",
    "title": "Class GCPlayerStore<T> | Gaming Couch Title",
    "keywords": "Class GCPlayerStore<T> Inheritance Object GCPlayerStore<T> Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax public class GCPlayerStore<T> : IGCPlayerStoreOutput<T>, IGCPlayerStoreInput<T> where T : IGCPlayer Type Parameters Name Description T Constructors GCPlayerStore() Declaration public GCPlayerStore() Methods AddPlayer(T) Declaration public void AddPlayer(T player) Parameters Type Name Description T player Clear() Declaration public void Clear() GetPlayerById(Int32) Declaration public T GetPlayerById(int playerId) Parameters Type Name Description Int32 playerId Returns Type Description T GetPlayerByIndex(Int32) Declaration public T GetPlayerByIndex(int index) Parameters Type Name Description Int32 index Returns Type Description T GetPlayerCount() Declaration public int GetPlayerCount() Returns Type Description Int32 GetPlayers() Declaration public List<T> GetPlayers() Returns Type Description List <T> GetPlayersEnumerable() Declaration public IEnumerable<T> GetPlayersEnumerable() Returns Type Description IEnumerable <T>"
  },
  "api/DSB.GC.GCPlayOptions.html": {
    "href": "api/DSB.GC.GCPlayOptions.html",
    "title": "Class GCPlayOptions | Gaming Couch Title",
    "keywords": "Class GCPlayOptions Inheritance Object GCPlayOptions Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public class GCPlayOptions Fields players Declaration public PlayerOptions[] players Field Value Type Description PlayerOptions [] Methods CreateFromJSON(String) Declaration public static GCPlayOptions CreateFromJSON(string optionsJson) Parameters Type Name Description String optionsJson Returns Type Description GCPlayOptions"
  },
  "api/DSB.GC.GCSetupOptions.html": {
    "href": "api/DSB.GC.GCSetupOptions.html",
    "title": "Class GCSetupOptions | Gaming Couch Title",
    "keywords": "Class GCSetupOptions Inheritance Object GCSetupOptions Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public class GCSetupOptions Fields gameModeId Declaration public string gameModeId Field Value Type Description String Methods CreateFromJSON(String) Declaration public static GCSetupOptions CreateFromJSON(string optionsJson) Parameters Type Name Description String optionsJson Returns Type Description GCSetupOptions"
  },
  "api/DSB.GC.GCStatus.html": {
    "href": "api/DSB.GC.GCStatus.html",
    "title": "Enum GCStatus | Gaming Couch Title",
    "keywords": "Enum GCStatus Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax public enum GCStatus Fields Name Description GameOver PendingSetup Playing SetupDone"
  },
  "api/DSB.GC.html": {
    "href": "api/DSB.GC.html",
    "title": "Namespace DSB.GC | Gaming Couch Title",
    "keywords": "Namespace DSB.GC Classes GamingCouch GCControllerInputs GCHud GCPlayer GCPlayerStore<T> GCPlayOptions GCSetupOptions Structs GamingCouch.PlayerEditorData GCHudConfig GCHudPlayersConfig GCPlayerSetupOptions GCPlayersHudData GCPlayersHudDataPlayer PlayerOptions Enums GCPlayerColor GCStatus"
  },
  "api/DSB.GC.PlayerOptions.html": {
    "href": "api/DSB.GC.PlayerOptions.html",
    "title": "Struct PlayerOptions | Gaming Couch Title",
    "keywords": "Struct PlayerOptions Namespace : DSB.GC Assembly : cs.temp.dll.dll Syntax [Serializable] public struct PlayerOptions Fields color Declaration public string color Field Value Type Description String name Declaration public string name Field Value Type Description String playerId Declaration public int playerId Field Value Type Description Int32"
  },
  "index.html": {
    "href": "index.html",
    "title": "Installation | Gaming Couch Title",
    "keywords": "Unity integration for Gaming Couch platform. Installation You can import this package by using Unity's Package manager's import from git URL. Follow the integration steps below to get started. // TODO: Create simple example project to demonstrate the integration. // TODO: Document whole Unity project basic setup. Basic integration 1) Add GamingCouch game object Add GamingCouch game object to your main game scene alongside your main game script object. // TODO: Need to make editor menu script to create the GamingCouch game object! 2) Create and link game script create main game script eg Game.cs or use your existing main game script create game object to the main game scene and assign the script to it link the game script to the \"listener\" field in GamingCouch game object (via inspector) now the game script will be able hook up to GamingCouch specific messages, we will get back to this 2) Create and link player prefab create Player.cs script extend GCPLayer, or modify your existing player script create player prefab and assign the script to it link the player prefab to the \"player prefab\" field in GamingCouch game object (via inspector) 3) Hook up your main game script Define player store in your main game script // Use GamingCouch: using DSB.GC; // Add new field for playerStore. Replace the \"Player\" with your player script name, if it differs: private GCPlayerStore<Player> playerStore = new GCPlayerStore<Player>(); Listen for GamingCouchSetup message This is the place where you can choose to load levels and what not based on the GCSetupOptions: private void GamingCouchSetup(GCSetupOptions options) { // do stuff based on the options. Eg. load level based on game mode etc. // after setup is done call: GamingCouch.Instance.SetupDone(); } Next we need to listen when GC and all the players are ready to play: private void GamingCouchPlay(GCPLayOptions options) { // we now have all the successfully loaded players so we can instantiate them. // This will instantiate and config the players by using the player prefab linked to GamingCouch game object GamingCouch.Instance.InstantiatePlayers(playerStore, options.players); // next we can set the game to play mode and or play intro StartMyGameNow(); } When the game ends, simply call: // you need to pass the player id's in placement order: GamingCouch.Instance.GameEnd(placementsByPlayerId); HUD integration Setup the HUD If the game has multiple game modes you can setup the hud differently for each game mode, but here is the most basic setup that will just display the avatars and names: GamingCouch.Instance.Hud.Setup(new GCHudConfig { players = new GCHudPlayersConfig() }); To display score or status text, see the API documentation. // TODO: API documentation for more configuration options Update the players HUD GamingCouch.Instance.Hud.UpdatePlayers(new GCPlayersHudData { players = Game.Instance.Players.Select(player => new GCPlayersHudDataPlayer { playerId = player.GetId(), eliminated = !player.IsAlive, placement = 0, }).ToArray() }); If your HUD displays score or status text, you can pass value for it, see the API documentation. // TODO: API documentation for more configuration options"
  }
}