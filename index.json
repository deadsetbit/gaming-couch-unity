{
  "api/DSB.GC.GCControllerInputs.html": {
    "href": "api/DSB.GC.GCControllerInputs.html",
    "title": "Class GCControllerInputs | Gaming Couch | 0.0.1",
    "keywords": "Class GCControllerInputs Namespace DSB.GC public class GCControllerInputs Inheritance object GCControllerInputs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GCControllerInputs(GCControllerInputsData) public GCControllerInputs(GCControllerInputsData data) Parameters data GCControllerInputsData Properties alt public bool alt { get; } Property Value bool leftX public float leftX { get; } Property Value float leftY public float leftY { get; } Property Value float primary public bool primary { get; } Property Value bool rightX public float rightX { get; } Property Value float rightY public float rightY { get; } Property Value float secondary public bool secondary { get; } Property Value bool Methods CreateFromJSON(string) public static GCControllerInputs CreateFromJSON(string inputsDataJson) Parameters inputsDataJson string Returns GCControllerInputs"
  },
  "api/DSB.GC.GCControllerInputsData.html": {
    "href": "api/DSB.GC.GCControllerInputsData.html",
    "title": "Class GCControllerInputsData | Gaming Couch | 0.0.1",
    "keywords": "Class GCControllerInputsData Namespace DSB.GC [Serializable] public class GCControllerInputsData Inheritance object GCControllerInputsData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields a0 Left stick X-axis public float a0 Field Value float a1 Left stick Y-axis public float a1 Field Value float a2 Right stick X-axis public float a2 Field Value float a3 Right stick Y-axis public float a3 Field Value float b0 Button index 0 - Would match A on Xbox controller public int b0 Field Value int b1 Button index 1 - Would match B on Xbox controller public int b1 Field Value int b12 DPad up public int b12 Field Value int b13 DPad bottom public int b13 Field Value int b14 DPad left public int b14 Field Value int b15 DPad right public int b15 Field Value int b2 Button index 2 - Would match X on Xbox controller public int b2 Field Value int b3 Button index 3 - Would match Y on Xbox controller public int b3 Field Value int Methods CreateFromJSON(string) public static GCControllerInputsData CreateFromJSON(string inputsDataJson) Parameters inputsDataJson string Returns GCControllerInputsData"
  },
  "api/DSB.GC.GCPlayOptions.html": {
    "href": "api/DSB.GC.GCPlayOptions.html",
    "title": "Class GCPlayOptions | Gaming Couch | 0.0.1",
    "keywords": "Class GCPlayOptions Namespace DSB.GC [Serializable] public class GCPlayOptions Inheritance object GCPlayOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields players public GCPlayerOptions[] players Field Value GCPlayerOptions[] Methods CreateFromJSON(string) public static GCPlayOptions CreateFromJSON(string optionsJson) Parameters optionsJson string Returns GCPlayOptions"
  },
  "api/DSB.GC.GCPlayer.html": {
    "href": "api/DSB.GC.GCPlayer.html",
    "title": "Class GCPlayer | Gaming Couch | 0.0.1",
    "keywords": "Class GCPlayer Namespace DSB.GC public class GCPlayer : MonoBehaviour Inheritance object GCPlayer Fields OnEliminated public Action<string> OnEliminated Field Value Action<string> OnFinished public Action<string> OnFinished Field Value Action<string> OnLivesChanged public Action<int, int, string> OnLivesChanged Field Value Action<int, int, string> OnScoreChanged public Action<int, int, string> OnScoreChanged Field Value Action<int, int, string> OnStatusChanged public Action<PlayerStatus, string, string> OnStatusChanged Field Value Action<PlayerStatus, string, string> OnUneliminated public Action<string> OnUneliminated Field Value Action<string> isBot public bool isBot Field Value bool Properties ColorBase GamingCouch player color \"base\" variant. public Color ColorBase { get; } Property Value Color ColorDark GamingCouch player color \"dark\" variant. public Color ColorDark { get; } Property Value Color ColorEnum public GCPlayerColor ColorEnum { get; } Property Value GCPlayerColor ColorHex public string ColorHex { get; } Property Value string ColorLight GamingCouch player color \"light\" variant. public Color ColorLight { get; } Property Value Color ColorName public string ColorName { get; } Property Value string ColorOffWhite GamingCouch player color \"off-white\" variant. public Color ColorOffWhite { get; } Property Value Color FinishedTime The time player was set as finished. eg. when they reach the finish line. public float FinishedTime { get; } Property Value float Id GamingCouch player id. Note that this can't be used as an index, as the number can be anything starting from 1. public int Id { get; } Property Value int IsBot public bool IsBot { get; } Property Value bool IsEliminated Get the player's eliminated status. Use LastSetEliminatedTime/LastSetUneliminatedTime to get the time the player was last eliminated/uneliminated. public bool IsEliminated { get; } Property Value bool IsFinished Get the player's finished status. Use FinishedTime to get the time the player was set as finished. public bool IsFinished { get; } Property Value bool LastSetEliminatedTime Get the time the player was last eliminated. public float LastSetEliminatedTime { get; } Property Value float LastSetUneliminatedTime Get the time the player was last set uneliminated. public float LastSetUneliminatedTime { get; } Property Value float Lives Set the player's lives. Depending on the GCGamePlacementOrder used, this can be used to determine the player's placement. If hudAutoUpdate is true, the changes will be reflected in the HUD. public int Lives { get; } Property Value int PlayerName GamingCouch player name. public string PlayerName { get; } Property Value string Score Get the player's score. public int Score { get; } Property Value int Status Player status. This can be utilized in different ways to indicate the player's status in the game. If Players HUD is set to display status text, this will be reflected there as well. public PlayerStatus Status { get; } Property Value PlayerStatus StatusText Players status text. This can be utilized in different ways to indicate the player's status in the game. If Players HUD is set to display status text, this will be reflected there as well. public string StatusText { get; } Property Value string Methods AddLives(int, string) Add to player's lives. public void AddLives(int lives, string reason) Parameters lives int reason string AddScore(int, string) Add to player's score. Depending on the GCGamePlacementOrder used, this can be used to determine the player's placement. If hudAutoUpdate is true, the changes will be reflected in the HUD. public void AddScore(int score, string reason) Parameters score int reason string GetHudStatusText() Get the player's HUD status text to be displayed in the HUD. This will include the status text and status. public string GetHudStatusText() Returns string GetHudValueText() Get the player's HUD value to be displayed in the HUD. public virtual string GetHudValueText() Returns string SetEliminated(string) Mark the player as eliminated. Depending on the GCGamePlacementOrder used, this can be used to determine the player's placement. public void SetEliminated(string reason) Parameters reason string SetFinished(string) Set the player as finished. Depending on the GCGamePlacementOrder used, this can be used to determine the player's placement. public void SetFinished(string reason) Parameters reason string SetLives(int, string) Set the player's lives. public void SetLives(int newLives, string reason) Parameters newLives int reason string SetScore(int, string) Set the player's score. Depending on the GCGamePlacementOrder used, this can be used to determine the player's placement. If hudAutoUpdate is true, the changes will be reflected in the HUD. public void SetScore(int newScore, string reason) Parameters newScore int reason string SetStatus(PlayerStatus, string, string) Set the player's status and status text. This status is displayed in the Players HUD if the HUD is configured to display the status. Player status HUD color will be set based on the status and text can be anything game specific. Example: In parking game, while player is finding a spot: SetStatus(PlayerStatus.Pending, \"Finding a spot\"); When spot is found: SetStatus(PlayerStatus.Success, \"Parked!\"); If left without spot: SetStatus(PlayerStatus.Failure, \"Sadge :(\"); public void SetStatus(PlayerStatus status, string statusText, string reason) Parameters status PlayerStatus statusText string reason string SetUneliminated(string) Clear the player's eliminated status. public void SetUneliminated(string reason) Parameters reason string SubtractLives(int, string) Subtract from player's lives. public void SubtractLives(int lives, string reason) Parameters lives int reason string SubtractScore(int, string) Subtract from player's score. Depending on the GCGamePlacementOrder used, this can be used to determine the player's placement. If hudAutoUpdate is true, the changes will be reflected in the HUD. public void SubtractScore(int score, string reason) Parameters score int reason string"
  },
  "api/DSB.GC.GCPlayerColor.html": {
    "href": "api/DSB.GC.GCPlayerColor.html",
    "title": "Enum GCPlayerColor | Gaming Couch | 0.0.1",
    "keywords": "Enum GCPlayerColor Namespace DSB.GC public enum GCPlayerColor Fields blue = 0 brown = 7 cyan = 6 green = 2 pink = 5 purple = 4 red = 1 yellow = 3"
  },
  "api/DSB.GC.GCPlayerOptions.html": {
    "href": "api/DSB.GC.GCPlayerOptions.html",
    "title": "Struct GCPlayerOptions | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayerOptions Namespace DSB.GC [Serializable] public struct GCPlayerOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields color public string color Field Value string isBot public bool isBot Field Value bool name public string name Field Value string playerId public int playerId Field Value int"
  },
  "api/DSB.GC.GCPlayerSetupOptions.html": {
    "href": "api/DSB.GC.GCPlayerSetupOptions.html",
    "title": "Struct GCPlayerSetupOptions | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayerSetupOptions Namespace DSB.GC public struct GCPlayerSetupOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields colorEnum public GCPlayerColor colorEnum Field Value GCPlayerColor colorName public string colorName Field Value string isBot public bool isBot Field Value bool name public string name Field Value string playerId public int playerId Field Value int"
  },
  "api/DSB.GC.GCPlayerStore-1.html": {
    "href": "api/DSB.GC.GCPlayerStore-1.html",
    "title": "Class GCPlayerStore<T> | Gaming Couch | 0.0.1",
    "keywords": "Class GCPlayerStore<T> Namespace DSB.GC public class GCPlayerStore<T> : GCPlayerStoreOutput<T>, GCPlayerStoreInput<T> where T : GCPlayer Type Parameters T Inheritance object GCPlayerStore<T> Implements GCPlayerStoreOutput<T> GCPlayerStoreInput<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GCPlayerStore() public GCPlayerStore() Properties EliminatedPlayerCount public int EliminatedPlayerCount { get; } Property Value int EliminatedPlayers public List<T> EliminatedPlayers { get; } Property Value List<T> EliminatedPlayersEnumerable public IEnumerable<T> EliminatedPlayersEnumerable { get; } Property Value IEnumerable<T> PlayerCount public int PlayerCount { get; } Property Value int Players public List<T> Players { get; } Property Value List<T> PlayersEnumerable public IEnumerable<T> PlayersEnumerable { get; } Property Value IEnumerable<T> UneliminatedPlayerCount public int UneliminatedPlayerCount { get; } Property Value int UneliminatedPlayers public List<T> UneliminatedPlayers { get; } Property Value List<T> UneliminatedPlayersEnumerable public IEnumerable<T> UneliminatedPlayersEnumerable { get; } Property Value IEnumerable<T> Methods AddPlayer(T) public void AddPlayer(T player) Parameters player T Clear() public void Clear() GetPlayerById(int) public T GetPlayerById(int playerId) Parameters playerId int Returns T GetPlayerByIndex(int) public T GetPlayerByIndex(int index) Parameters index int Returns T"
  },
  "api/DSB.GC.GCSetupOptions.html": {
    "href": "api/DSB.GC.GCSetupOptions.html",
    "title": "Class GCSetupOptions | Gaming Couch | 0.0.1",
    "keywords": "Class GCSetupOptions Namespace DSB.GC [Serializable] public class GCSetupOptions Inheritance object GCSetupOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields gameModeId public string gameModeId Field Value string Methods CreateFromJSON(string) public static GCSetupOptions CreateFromJSON(string optionsJson) Parameters optionsJson string Returns GCSetupOptions"
  },
  "api/DSB.GC.GCStatus.html": {
    "href": "api/DSB.GC.GCStatus.html",
    "title": "Enum GCStatus | Gaming Couch | 0.0.1",
    "keywords": "Enum GCStatus Namespace DSB.GC public enum GCStatus Fields GameOver = 3 PendingSetup = 0 Playing = 2 SetupDone = 1"
  },
  "api/DSB.GC.Game.GCGame.html": {
    "href": "api/DSB.GC.Game.GCGame.html",
    "title": "Class GCGame | Gaming Couch | 0.0.1",
    "keywords": "Class GCGame Namespace DSB.GC.Game public class GCGame Inheritance object GCGame Derived GCGameVersus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GCGame(GamingCouch, GCPlayerStoreOutput<GCPlayer>, GCGameSetupOptions) public GCGame(GamingCouch gamingCouch, GCPlayerStoreOutput<GCPlayer> playerStore, GCGameSetupOptions options) Parameters gamingCouch GamingCouch playerStore GCPlayerStoreOutput<GCPlayer> options GCGameSetupOptions Methods GetPlayersInPlacementOrder(IEnumerable<GCPlayer>) public IEnumerable<GCPlayer> GetPlayersInPlacementOrder(IEnumerable<GCPlayer> players) Parameters players IEnumerable<GCPlayer> Returns IEnumerable<GCPlayer> HandlePlayersHudAutoUpdate() public void HandlePlayersHudAutoUpdate()"
  },
  "api/DSB.GC.Game.GCGameHudOptions.html": {
    "href": "api/DSB.GC.Game.GCGameHudOptions.html",
    "title": "Class GCGameHudOptions | Gaming Couch | 0.0.1",
    "keywords": "Class GCGameHudOptions Namespace DSB.GC.Game public class GCGameHudOptions Inheritance object GCGameHudOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isPlayersAutoUpdateEnabled public bool isPlayersAutoUpdateEnabled Field Value bool players public GCHudPlayersConfig players Field Value GCHudPlayersConfig"
  },
  "api/DSB.GC.Game.GCGameSetupOptions.html": {
    "href": "api/DSB.GC.Game.GCGameSetupOptions.html",
    "title": "Class GCGameSetupOptions | Gaming Couch | 0.0.1",
    "keywords": "Class GCGameSetupOptions Namespace DSB.GC.Game public class GCGameSetupOptions Inheritance object GCGameSetupOptions Derived GCGameVersusSetupOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields hud public GCGameHudOptions hud Field Value GCGameHudOptions maxScore public int maxScore Field Value int placementCriteria public GCPlacementSortCriteria[] placementCriteria Field Value GCPlacementSortCriteria[]"
  },
  "api/DSB.GC.Game.GCGameVersus.html": {
    "href": "api/DSB.GC.Game.GCGameVersus.html",
    "title": "Class GCGameVersus | Gaming Couch | 0.0.1",
    "keywords": "Class GCGameVersus Namespace DSB.GC.Game public class GCGameVersus : GCGame Inheritance object GCGame GCGameVersus Inherited Members GCGame.HandlePlayersHudAutoUpdate() GCGame.GetPlayersInPlacementOrder(IEnumerable<GCPlayer>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GCGameVersus(GamingCouch, GCPlayerStoreOutput<GCPlayer>, GCGameVersusSetupOptions) public GCGameVersus(GamingCouch gamingCouch, GCPlayerStoreOutput<GCPlayer> playerStore, GCGameVersusSetupOptions options) Parameters gamingCouch GamingCouch playerStore GCPlayerStoreOutput<GCPlayer> options GCGameVersusSetupOptions"
  },
  "api/DSB.GC.Game.GCGameVersusSetupOptions.html": {
    "href": "api/DSB.GC.Game.GCGameVersusSetupOptions.html",
    "title": "Class GCGameVersusSetupOptions | Gaming Couch | 0.0.1",
    "keywords": "Class GCGameVersusSetupOptions Namespace DSB.GC.Game public class GCGameVersusSetupOptions : GCGameSetupOptions Inheritance object GCGameSetupOptions GCGameVersusSetupOptions Inherited Members GCGameSetupOptions.maxScore GCGameSetupOptions.placementCriteria GCGameSetupOptions.hud object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DSB.GC.Game.GCPlacementSortCriteria.html": {
    "href": "api/DSB.GC.Game.GCPlacementSortCriteria.html",
    "title": "Enum GCPlacementSortCriteria | Gaming Couch | 0.0.1",
    "keywords": "Enum GCPlacementSortCriteria Namespace DSB.GC.Game public enum GCPlacementSortCriteria Fields Eliminated = 0 EliminatedDescending = 1 Finished = 4 FinishedDescending = 5 Score = 2 ScoreDescending = 3"
  },
  "api/DSB.GC.Game.html": {
    "href": "api/DSB.GC.Game.html",
    "title": "Namespace DSB.GC.Game | Gaming Couch | 0.0.1",
    "keywords": "Namespace DSB.GC.Game Classes GCGame GCGameHudOptions GCGameSetupOptions GCGameVersus GCGameVersusSetupOptions Enums GCPlacementSortCriteria"
  },
  "api/DSB.GC.GamingCouch.html": {
    "href": "api/DSB.GC.GamingCouch.html",
    "title": "Class GamingCouch | Gaming Couch | 0.0.1",
    "keywords": "Class GamingCouch Namespace DSB.GC public class GamingCouch : MonoBehaviour Inheritance object GamingCouch Fields LogLevel public LogLevel LogLevel Field Value LogLevel Properties Hud public GCHud Hud { get; } Property Value GCHud Instance public static GamingCouch Instance { get; } Property Value GamingCouch Status public GCStatus Status { get; } Property Value GCStatus Methods Clear() Clears players from the player store and destroys the game objects. Clears player inputs. public void Clear() ClearInputs() Clear all player inputs. public void ClearInputs() GameOver() Call when the game is over. Note: This will trigger the platform to show the game over screen immediately, so make sure to call this after possible outro animations etc. are done. public void GameOver() Exceptions InvalidOperationException Throws if SetupGame is not called before. GetInputsByPlayerId(int) Get player inputs by player ID. public GCControllerInputs GetInputsByPlayerId(int playerId) Parameters playerId int Player ID Returns GCControllerInputs null if not available InstantiatePlayers<T>(GCPlayerStore<T>, GCPlayerOptions[], Vector3, Quaternion) Instantiate players by using the prefab defined in GamingCouch game object's inspector. public void InstantiatePlayers<T>(GCPlayerStore<T> playerStore, GCPlayerOptions[] playerOptions, Vector3 position, Quaternion rotation) where T : GCPlayer Parameters playerStore GCPlayerStore<T> Player store to add the players to. Note: You should instantiate this store in your main Game script to be able to provide it here. Refer the integration manual. playerOptions GCPlayerOptions[] Player options to instantiate the players with. These options are available via GamingCouchPlay position Vector3 rotation Quaternion Type Parameters T Your game specific player class that extends GCPlayer. Restart() Can be called for dev purposes to quickly restart the game in editor play mode. public void Restart() SetupDone() Call after game setup is done eg. level and other assets are loaded and the game is ready to play intro and spawn players. GamingCouchPlay will be called next by the platform. You should not start the game before GamingCouchPlay is called. public void SetupDone() SetupGameVersus(GCGameVersusSetupOptions) public void SetupGameVersus(GCGameVersusSetupOptions options) Parameters options GCGameVersusSetupOptions"
  },
  "api/DSB.GC.Hud.GCHud.html": {
    "href": "api/DSB.GC.Hud.GCHud.html",
    "title": "Class GCHud | Gaming Couch | 0.0.1",
    "keywords": "Class GCHud Namespace DSB.GC.Hud public class GCHud Inheritance object GCHud Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Camera public Camera Camera { get; } Property Value Camera Methods HandleQueue() public void HandleQueue() QueuePointData(GCScreenPointDataPoint) public void QueuePointData(GCScreenPointDataPoint pointData) Parameters pointData GCScreenPointDataPoint SetCamera(Camera) public void SetCamera(Camera camera) Parameters camera Camera Setup(GCHudConfig) Setup the HUD. Should be called once at the start of the game and before UpdatePlayers. public void Setup(GCHudConfig config) Parameters config GCHudConfig UpdatePlayers(GCPlayersHudData) Update the players in the HUD. Call Setup first. public void UpdatePlayers(GCPlayersHudData playersHudData) Parameters playersHudData GCPlayersHudData UpdateScreenPointHud(GCScreenPointData) public void UpdateScreenPointHud(GCScreenPointData testPointData) Parameters testPointData GCScreenPointData"
  },
  "api/DSB.GC.Hud.GCHudConfig.html": {
    "href": "api/DSB.GC.Hud.GCHudConfig.html",
    "title": "Struct GCHudConfig | Gaming Couch | 0.0.1",
    "keywords": "Struct GCHudConfig Namespace DSB.GC.Hud [Serializable] public struct GCHudConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields players public GCHudPlayersConfig players Field Value GCHudPlayersConfig"
  },
  "api/DSB.GC.Hud.GCHudPlayersConfig.html": {
    "href": "api/DSB.GC.Hud.GCHudPlayersConfig.html",
    "title": "Struct GCHudPlayersConfig | Gaming Couch | 0.0.1",
    "keywords": "Struct GCHudPlayersConfig Namespace DSB.GC.Hud Configuration for the players hud. [Serializable] public struct GCHudPlayersConfig : ISerializationCallbackReceiver Implements ISerializationCallbackReceiver Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields valueTypeEnum [NonSerialized] public PlayersHudValueType valueTypeEnum Field Value PlayersHudValueType Methods OnAfterDeserialize() public void OnAfterDeserialize() OnBeforeSerialize() public void OnBeforeSerialize()"
  },
  "api/DSB.GC.Hud.GCNameTag.html": {
    "href": "api/DSB.GC.Hud.GCNameTag.html",
    "title": "Class GCNameTag | Gaming Couch | 0.0.1",
    "keywords": "Class GCNameTag Namespace DSB.GC.Hud public class GCNameTag : MonoBehaviour Inheritance object GCNameTag Methods SetPlayerId(int) public void SetPlayerId(int playerId) Parameters playerId int"
  },
  "api/DSB.GC.Hud.GCPlayersHudData.html": {
    "href": "api/DSB.GC.Hud.GCPlayersHudData.html",
    "title": "Struct GCPlayersHudData | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayersHudData Namespace DSB.GC.Hud [Serializable] public struct GCPlayersHudData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields players The players to display in the HUD. public GCPlayersHudDataPlayer[] players Field Value GCPlayersHudDataPlayer[]"
  },
  "api/DSB.GC.Hud.GCPlayersHudDataPlayer.html": {
    "href": "api/DSB.GC.Hud.GCPlayersHudDataPlayer.html",
    "title": "Struct GCPlayersHudDataPlayer | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayersHudDataPlayer Namespace DSB.GC.Hud [Serializable] public struct GCPlayersHudDataPlayer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields eliminated If the player is out of the game, the HUD can be set to display this player as eliminated. public bool eliminated Field Value bool placement The placement of the player. 0 is first place, 1 is second place, etc. Players in the HUD will be sorted based on this value to indicate placements at given time. (HUD sorting not yet implemented) public int placement Field Value int playerId Gaming Couch player ID. public int playerId Field Value int value The value to display for the player. This can be points, lives, etc. based on the valueType in the GCHudPlayersConfig. public string value Field Value string"
  },
  "api/DSB.GC.Hud.GCScreenPointData.html": {
    "href": "api/DSB.GC.Hud.GCScreenPointData.html",
    "title": "Struct GCScreenPointData | Gaming Couch | 0.0.1",
    "keywords": "Struct GCScreenPointData Namespace DSB.GC.Hud [Serializable] public struct GCScreenPointData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields points List of points to display in the HUD. public GCScreenPointDataPoint[] points Field Value GCScreenPointDataPoint[]"
  },
  "api/DSB.GC.Hud.GCScreenPointDataPoint.html": {
    "href": "api/DSB.GC.Hud.GCScreenPointDataPoint.html",
    "title": "Struct GCScreenPointDataPoint | Gaming Couch | 0.0.1",
    "keywords": "Struct GCScreenPointDataPoint Namespace DSB.GC.Hud [Serializable] public struct GCScreenPointDataPoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields playerId The player ID. public int playerId Field Value int type public string type Field Value string x The x position of the point in percentages 0-1. public float x Field Value float y The y position of the point in percentages 0-1. public float y Field Value float"
  },
  "api/DSB.GC.Hud.PlayersHudValueType.html": {
    "href": "api/DSB.GC.Hud.PlayersHudValueType.html",
    "title": "Enum PlayersHudValueType | Gaming Couch | 0.0.1",
    "keywords": "Enum PlayersHudValueType Namespace DSB.GC.Hud public enum PlayersHudValueType Fields Lives = 4 None = 0 PointsSmall = 1 Status = 2 Text = 3"
  },
  "api/DSB.GC.Hud.html": {
    "href": "api/DSB.GC.Hud.html",
    "title": "Namespace DSB.GC.Hud | Gaming Couch | 0.0.1",
    "keywords": "Namespace DSB.GC.Hud Classes GCHud GCNameTag Structs GCHudConfig GCHudPlayersConfig Configuration for the players hud. GCPlayersHudData GCPlayersHudDataPlayer GCScreenPointData GCScreenPointDataPoint Enums PlayersHudValueType"
  },
  "api/DSB.GC.Log.GCLog.html": {
    "href": "api/DSB.GC.Log.GCLog.html",
    "title": "Class GCLog | Gaming Couch | 0.0.1",
    "keywords": "Class GCLog Namespace DSB.GC.Log public class GCLog Inheritance object GCLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields logLevel public static LogLevel logLevel Field Value LogLevel Methods Log(LogLevel, string) public static void Log(LogLevel level, string message) Parameters level LogLevel message string LogDebug(string) public static void LogDebug(string message) Parameters message string LogInfo(string) public static void LogInfo(string message) Parameters message string LogWarning(string) public static void LogWarning(string message) Parameters message string"
  },
  "api/DSB.GC.Log.LogLevel.html": {
    "href": "api/DSB.GC.Log.LogLevel.html",
    "title": "Enum LogLevel | Gaming Couch | 0.0.1",
    "keywords": "Enum LogLevel Namespace DSB.GC.Log public enum LogLevel Fields Debug = 3 Info = 2 None = 0 Warning = 1"
  },
  "api/DSB.GC.Log.html": {
    "href": "api/DSB.GC.Log.html",
    "title": "Namespace DSB.GC.Log | Gaming Couch | 0.0.1",
    "keywords": "Namespace DSB.GC.Log Classes GCLog Enums LogLevel"
  },
  "api/DSB.GC.PlayerStatus.html": {
    "href": "api/DSB.GC.PlayerStatus.html",
    "title": "Enum PlayerStatus | Gaming Couch | 0.0.1",
    "keywords": "Enum PlayerStatus Namespace DSB.GC public enum PlayerStatus Fields Failure = 3 Neutral = 0 Pending = 1 Success = 2"
  },
  "api/DSB.GC.html": {
    "href": "api/DSB.GC.html",
    "title": "Namespace DSB.GC | Gaming Couch | 0.0.1",
    "keywords": "Namespace DSB.GC Classes GCControllerInputs GCControllerInputsData GCPlayOptions GCPlayer GCPlayerStore<T> GCSetupOptions GamingCouch Structs GCPlayerOptions GCPlayerSetupOptions Enums GCPlayerColor GCStatus PlayerStatus"
  },
  "api/Global.GCPlayerColorData.html": {
    "href": "api/Global.GCPlayerColorData.html",
    "title": "Class GCPlayerColorData | Gaming Couch | 0.0.1",
    "keywords": "Class GCPlayerColorData Namespace Global public static class GCPlayerColorData Inheritance object GCPlayerColorData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Variants public static readonly Dictionary<GCPlayerColor, GCPlayerColorVariants> Variants Field Value Dictionary<GCPlayerColor, GCPlayerColorVariants>"
  },
  "api/Global.GCPlayerColorVariants.html": {
    "href": "api/Global.GCPlayerColorVariants.html",
    "title": "Struct GCPlayerColorVariants | Gaming Couch | 0.0.1",
    "keywords": "Struct GCPlayerColorVariants Namespace Global public struct GCPlayerColorVariants Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GCPlayerColorVariants(Color, Color, Color, Color) public GCPlayerColorVariants(Color baseColor, Color dark, Color light, Color offWhite) Parameters baseColor Color dark Color light Color offWhite Color Fields BaseColor public Color BaseColor Field Value Color Dark public Color Dark Field Value Color Light public Color Light Field Value Color OffWhite public Color OffWhite Field Value Color"
  },
  "api/Global.GCPlayerStoreInput-1.html": {
    "href": "api/Global.GCPlayerStoreInput-1.html",
    "title": "Interface GCPlayerStoreInput<T> | Gaming Couch | 0.0.1",
    "keywords": "Interface GCPlayerStoreInput<T> Namespace Global public interface GCPlayerStoreInput<in T> where T : GCPlayer Type Parameters T Methods AddPlayer(T) void AddPlayer(T player) Parameters player T"
  },
  "api/Global.GCPlayerStoreOutput-1.html": {
    "href": "api/Global.GCPlayerStoreOutput-1.html",
    "title": "Interface GCPlayerStoreOutput<T> | Gaming Couch | 0.0.1",
    "keywords": "Interface GCPlayerStoreOutput<T> Namespace Global public interface GCPlayerStoreOutput<out T> where T : GCPlayer Type Parameters T Properties EliminatedPlayerCount int EliminatedPlayerCount { get; } Property Value int EliminatedPlayersEnumerable IEnumerable<out T> EliminatedPlayersEnumerable { get; } Property Value IEnumerable<T> PlayerCount int PlayerCount { get; } Property Value int PlayersEnumerable IEnumerable<out T> PlayersEnumerable { get; } Property Value IEnumerable<T> UneliminatedPlayerCount int UneliminatedPlayerCount { get; } Property Value int UneliminatedPlayersEnumerable IEnumerable<out T> UneliminatedPlayersEnumerable { get; } Property Value IEnumerable<T> Methods Clear() void Clear() GetPlayerById(int) T GetPlayerById(int playerId) Parameters playerId int Returns T GetPlayerByIndex(int) T GetPlayerByIndex(int index) Parameters index int Returns T"
  },
  "api/Global.GamingCouchEditor.html": {
    "href": "api/Global.GamingCouchEditor.html",
    "title": "Class GamingCouchEditor | Gaming Couch | 0.0.1",
    "keywords": "Class GamingCouchEditor Namespace Global public class GamingCouchEditor Inheritance object GamingCouchEditor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | Gaming Couch | 0.0.1",
    "keywords": "Namespace Classes GCPlayerColorData GamingCouchEditor Structs GCPlayerColorVariants Interfaces GCPlayerStoreInput<T> GCPlayerStoreOutput<T>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": ""
  },
  "manual/README.html": {
    "href": "manual/README.html",
    "title": "| Gaming Couch | 0.0.1",
    "keywords": "https://github.com/deadsetbit/docfx-unitypackage?tab=readme-ov-file#usage"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Installation | Gaming Couch | 0.0.1",
    "keywords": "Unity integration for Gaming Couch platform. Installation You can import this package by using Unity's Package manager's import from git URL. Follow the integration steps below to get started. Configure the Editor From Build Settings, switch the platform to \"WebGL\" fix the game window to 16:9 (from top of the Game window), as the platform is fixed to 16:9 aspect ratio Basic integration 1) Add GamingCouch game object Add GamingCouch game object to your main scene by right clicking the scene hierarchy and selecting \"GamingCouch\" from the menu. 2) Create and link game script (for new game project) create \"Game\" game object to the main scene and create and add \"Game.cs\" main game script to it link your main game object to the \"Listener\" field in the GamingCouch game object (via inspector) now the game script will be able hook up to GamingCouch specific messages (we will get back to this) 3) Create and link player prefab (for new game project) create \"Player\" prefab and create and add \"Player.cs\" script to it make your player script extend DSB.GC.GCPlayer (instead of MonoBehaviour) link the player prefab to the \"Player Prefab\" field in GamingCouch game object (via inspector) 4) Hook up your main game script Define player store in your main game script using DSB.GC; using DSB.GC.Game; using DSB.GC.Hud; // Add new field for playerStore. Replace the \"Player\" with your player script name, if it differs: private GCPlayerStore<Player> playerStore = new GCPlayerStore<Player>(); Listen for GamingCouchSetup message This is the place where you can start to load levels and what not based on the GCSetupOptions: private void GamingCouchSetup(GCSetupOptions options) { // do stuff based on the options. Eg. load level based on game mode etc. // after setup is done call: GamingCouch.Instance.SetupDone(); } Next we need to listen when GC and all the players are ready to play: private void GamingCouchPlay(GCPlayOptions options) { // we now have all the successfully loaded players so we can instantiate them. // This will instantiate and config the players by using the player prefab linked to GamingCouch game object GamingCouch.Instance.InstantiatePlayers(playerStore, options.players, Vector3.up * 100, Quaternion.identity); // Setup the game and HUD based on the game/game mode GamingCouch.Instance.SetupGameVersus( new GCGameVersusSetupOptions() { // Adjust the placement sorting criteria to fit your game. // You can add/remove or change the order of the components. // NOTE: In order for the placement criteria to work, you need // to use the GCPlayer methods, such as SetEliminated, SetScore/AddScore, SetFinished. placementCriteria = new GCPlacementSortCriteria[] { GCPlacementSortCriteria.EliminatedDescending, GCPlacementSortCriteria.ScoreDescending, GCPlacementSortCriteria.Finished }, // configure the HUD, see more on the HUD section hud = new GCGameHudOptions() { players = new GCHudPlayersConfig(), // this is by default true, but can be set to false if Players HUD needs to be controlled manually isPlayersAutoUpdateEnabled = true, } } ); // next we can set the game to play mode and or play intro StartMyGameNow(); } When the game ends, simply call: GamingCouch.Instance.GameOver(); HUD NOTE: All HUD related features are only rendered in the Gaming Couch platform and cant be tested in the editor or unity build alone. Name tags To add name tags for players, you need to add GCNameTag component to your player game object. Usually you want to position the name tag to be above the player, so you can also add the GCNameTag component to child object of the player game object and offset it to be above the player's head for example. NOTE: Currently, there is no way to show the name tags in the editor or unity build alone. The only way to see if the name tags are working correctly is to test it in the Gaming Couch platform. Configure Players HUD to display score, lives etc. Display score GamingCouch.Instance.SetupGameVersus( new GCGameVersusSetupOptions() { maxScore = 10, // required to display the score in HUD hud = new GCGameHudOptions() { players = new GCHudPlayersConfig() { valueTypeEnum = PlayersHudValueType.PointsSmall ... } ... } ... } ); Now the hud is set to reflect the player score that is set by GCPlayer.SetScore or GCPlayer.AddScore. // TODO: Examples for all the value types, and how to update them To see other HUD value types, see API documentation for GCHudPlayersConfig. Manually update the Players HUD NOTE: You need to disable the auto update in the SetupGame's GCGameHudOptions to manually update the Players HUD! using System.Linq; using DSB.GC.Hud; GamingCouch.Instance.Hud.UpdatePlayers(new GCPlayersHudData { players = playerStore.Players.Select(player => new GCPlayersHudDataPlayer { playerId = player.Id, // The GamingCouch player id eliminated = player.IsEliminated, placement = 0, // The placement of the player to sort the players HUD by value = \"\"; // The value to display in the HUD. Set depending on the value type set in the GCGameHudOptions }).ToArray() }); Player integration Configure player When the player is instantiated by GamingCouch some properties are available, such as Gaming Couch player id, color and name. For all available properties, see the API documentation for GCPlayer. The values are available on your player script instance on Start (note that they are not yet available on Awake!): public class Player : GCPlayer { ... private void Start() { GetComponent<SpriteRenderer>().color = ColorBase; } ... } Player inputs Read and apply the player inputs in your main game script Update method: private void Update() { foreach (var player in playerStore.Players) { var inputs = GamingCouch.Instance.GetInputsByPlayerId(player.Id); if (inputs == null) continue; player.PlayerController.Move(inputs.leftX); player.PlayerController.Jump(inputs.primary); } } Player placement You do not need to sort the players, just define correct placement criteria in the SetupGame call (see above) and use the GCPlayer methods to set the player state (eliminated, score, finished): // Set player eliminated player.SetEliminated(\"Out of bounds\"); // Set player score player.SetScore(0, \"Dropped all coins\"); // ...or add score player.AddScore(1, \"Collected a coin\"); // ...or subtract score player.SubtractScore(2, \"Pushed off the edge\"); // Set player finished player.SetFinished(\"Finish line\"); Player colors Access different player color variants directly via the GCPlayer instance: GCPlayer.ColorBase GCPlayer.ColorDark GCPlayer.ColorLight GCPlayer.ColorOffWhite Build your project for Gaming Couch When you are ready to build your project for Gaming Couch, you need to build it as WebGL. You can change this by selecting the WebGL tab from \"Project Settings > Player\". Under \"Project Settings > Player > WebGL\" tab's \"Publish settings\", set the compression format to \"Disabled\". // TODO: Further instructions on how to build the project for Gaming Couch and integrate it to the platform. What next? Explore our example template game project: Gaming Couch Unity Template Dive into the API documentation Creating Unity project from scratch If you do not want to use our Gaming Couch Unity Template, you can create project from scratch by following these steps: create new unity project with the \"Universal 3D\" template (URP) or optionally \"Universal 2D\" (URP) follow the installation and integration steps"
  }
}